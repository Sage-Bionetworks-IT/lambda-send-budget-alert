AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Send SNS message to Synapse user as email

Parameters:
  SNSTopicARN:
    Description: 'The ARN of the SNS Topic from which to get events'
    Type: String
  SynapseUserKeyName:
    Description: 'The name of the key that stores the Synapse user name'
    Type: String
  SynapsePasswordKeyName:
    Description: 'The name of the key that stores the Synapse password'
    Type: String

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Resources:
  SendBudgetAlertFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: send_budget_alert/
      Handler: app.lambda_handler
      Runtime: python3.6
      Role: !GetAtt FunctionRole.Arn
      Events:
        SendBudgetAlert:
          Type: SNS # More info about SNS Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#sns
          Properties:
            Topic: !Ref SNSTopicARN
            Region: !Ref AWS::Region
      Environment:
        Variables:
          SYNAPSE_USER_KEYNAME: !Ref SynapseUserKeyName
          SYNAPSE_PASSWORD_KEYNAME: !Ref SynapsePasswordKeyName

  FunctionRole:   # execute lambda function with this role
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref SsmManagedPolicy

  SsmManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: GetParamAccess
            Action:
              - 'ssm:*'
            Effect: Allow
            Resource: !Sub |
              'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${SynapseUserKeyName}'
              'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${SynapsePasswordKeyName}'

Outputs:
  SendBudgetAlertFunctionArn:
    Description: "Send Budget Alert Lambda Function ARN"
    Value: !GetAtt SendBudgetAlertFunction.Arn
  SendBudgetAlertFunctionRoleArn:
    Description: "Implicit IAM Role created for SendBudgetAlert function"
    Value: !GetAtt FunctionRole.Arn
